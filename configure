#!/bin/bash

# Message colors and cursor movements
CURSOR_UP="\033[1F";
MSG_REPLACE="$CURSOR_UP\033[2K";
COLOR_OK="\033[1;32m";
COLOR_INFO="\033[1;33m";
COLOR_ERROR="\033[1;31m";
COLOR_RESET="\033[22;0m";

PACKAGE_MANAGER="";
INSTALL_COMMAND="";
CHECK_COMMAND="";
REQUIREMENTS=("make" "nasm" "gcc" "g++" "gcc-multilib" "g++-multilib" "binutils" "mtools" "dosfstools" "e2fsprogs" "e2tools" "xorriso" "gnu-efi");
EXCLUDES=("g++" "gcc-multilib" "g++-multilib"); # Those are the packages that are already included in pacman so exclude them
MISSING=();

echo "AmberOS project configurator"
echo "(C) Copyright 2023, Michal Pazurek"

# Check if the script is run with sudo/root privileges
if [[ $EUID -ne 0 ]]; then
    echo -e "$COLOR_ERROR"This script requires root privileges to install packages. Please run it as root."$COLOR_RESET";
    exit 1;
fi

echo -e "$COLOR_INFO"[Detecting package manager...]"$COLOR_RESET";
if [ -x "$(command -v apt-get)" ]; then
    echo -e "$MSG_REPLACE""$COLOR_OK"[Found package manager - apt-get]"$COLOR_RESET";
    PACKAGE_MANAGER="apt-get";
    INSTALL_COMMAND="apt install";
    CHECK_COMMAND="dpkg -l";
elif [ -x "$(command -v yum)" ]; then
    echo -e "$MSG_REPLACE""$COLOR_OK"[Found package manager - yum]"$COLOR_RESET";
    PACKAGE_MANAGER="yum";
    INSTALL_COMMAND="yum install";
    CHECK_COMMAND="yum list installed";
elif [ -x "$(command -v dnf)" ]; then
    echo -e "$MSG_REPLACE""$COLOR_OK"[Found package manager - dnf]"$COLOR_RESET";
    PACKAGE_MANAGER="dnf";
    INSTALL_COMMAND="dnf install";
    CHECK_COMMAND="dnf list installed";
elif [ -x "$(command -v zypper)" ]; then
    echo -e "$MSG_REPLACE""$COLOR_OK"[Found package manager - zypper]"$COLOR_RESET";
    PACKAGE_MANAGER="zypper";
    INSTALL_COMMAND="zypper install";
    CHECK_COMMAND="zypper se --installed-only";
elif [ -x "$(command -v apk)" ]; then
    echo -e "$MSG_REPLACE""$COLOR_OK"[Found package manager - apk]"$COLOR_RESET";
    PACKAGE_MANAGER="apk";
    INSTALL_COMMAND="apk add --no-cache";
    CHECK_COMMAND="apk info";
elif [ -x "$(command -v pacman)" ]; then
    echo -e "$MSG_REPLACE""$COLOR_OK"[Found package manager - pacman]"$COLOR_RESET";
    PACKAGE_MANAGER="pacman";
    INSTALL_COMMAND="pacman -Ss";
    CHECK_COMMAND="pacman -Qs";
else
    echo -e "$MSG_REPLACE""$COLOR_ERROR"[Couldn\'t find a supported package manager]"$COLOR_RESET";
    exit 1;
fi

# Requirement check loop
exclude=0;
for req in ${REQUIREMENTS[@]}; do
    if [ "$PACKAGE_MANAGER" == "pacman" ]; then
        for ex in "${EXCLUDES[@]}"; do
            if [ "$ex" == "$req" ]; then
                exclude=1;
                break;  # Exit the loop if the value is found in EXCLUDES
            fi
        done
    fi

    if [ "$exclude" -eq 1 ]; then
        exclude=0;
        continue;
    fi;

    echo -e "$COLOR_INFO"[Checking for $req...]"$COLOR_RESET";
    if $CHECK_COMMAND $req > /dev/null 2>&1; then
        echo -e "$MSG_REPLACE""$COLOR_OK"[Checking for $req - Installed]"$COLOR_RESET";
    else
        echo -e "$MSG_REPLACE""$COLOR_ERROR"[Checking for $req - Missing]"$COLOR_RESET";
        MISSING+=($req)
    fi;

    continue;
done;

# Check if there are missing packages and prompt the user for installation confirmation
if [ ${#MISSING[@]} -ne 0 ]; then
    read -p "Would you like to install the required packages? [y/n]: " choice;
    
    # Check if the input is "y" or "n"
    if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
        NEEDED_PACKAGES="";
        for req in ${MISSING[@]}; do
            NEEDED_PACKAGES="$NEEDED_PACKAGES $req";
        done;

        # Remove the leading space
        NEEDED_PACKAGES="${NEEDED_PACKAGES# }";

        $INSTALL_COMMAND $NEEDED_PACKAGES;
    elif [[ "$choice" == "n" || "$choice" == "N" ]]; then
        exit 0;
    else
        echo "Invalid choice. Exiting program";
        exit 1;
    fi
fi

echo "Project configured! You can now build it running \"make\""